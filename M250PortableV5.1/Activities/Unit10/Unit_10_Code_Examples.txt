// M250 Unit 10 Code Examples 

// ACTIVITY 1 

// 1.1 Testing the Size
// Demonstrates the result of sending size() to a newly created empty set

      Set<String> herbSet = new HashSet<String>();
      int size  = herbSet.size();
      System.out.println("The size of the newly created set is: " + size); 


// 1.2 Adding Elements   
// Demonstrates how to add elements to a set using the add() message

      Set<String> herbSet = new HashSet<String>();
      herbSet.add("Parsley"); 
      herbSet.add("Sage");
      herbSet.add("Rosemary");
      System.out.println("Size after adding elements is: " + herbSet.size()); 


// 1.3 No duplicates allowed     
// Demonstrates the effect of attempting to add duplicates to a set
  
      Set<String> herbSet = new HashSet<String>();
      herbSet.add("Parsley");  
      herbSet.add("Sage");
      herbSet.add("Rosemary");
      herbSet.add("Rosemary");
      herbSet.add("Rosemary");
      System.out.println("Size after attempting to add duplicates is: " 
                           + herbSet.size());

// ACTIVITY 2
// Methods that test, but do not alter
   
// 2.1 Demonstrates the result of sending isEmpty() to a newly created set
  
      Set<String> herbSet = new HashSet<>();
      boolean result; 
      result = herbSet.isEmpty();
      System.out.println("The set is empty is: " + result);

			//Note, the variable result could have been ommitted, e.g.
      System.out.println("The set is empty is: " + herbSet.isEmpty());

// 2.2 Demonstrates the result of sending isEmpty() to a non empty set    
  
      Set<String> herbSet = new HashSet<>();
      herbSet.add( "Parsley");  
      herbSet.add( "Sage");
      herbSet.add( "Rosemary");
      System.out.println("The set is empty is: " + herbSet.isEmpty());

// 2.3 Demonstrates the use of contains() with sets
  
      Set<String> herbSet = new HashSet<>();
      String testString = "Sage";  // Try different values for testString
      herbSet.add("Parsley");  
      herbSet.add("Sage");
      herbSet.add("Rosemary");
      System.out.println("The set contains " + testString + " is: " 
                              + herbSet.contains(testString));
   
// ACTIVITY 3
// Removing elements
 
   /**
    * Demonstrates sending the remove() message to a set. If the argument
    * to the remove() message is found in the set, it is removed from the
    * set and the message answer is true, otherwise the message answer is
    * false and the set is unchanged. 
    *
    * When evaluating this code you should try different arguments 
    * to the remove() message.
    */
  
      Set<String> herbSet = new HashSet<>();
      String aString = "Parsley";  // Try different values 
      herbSet.add("Parsley");  
      herbSet.add("Sage");
      herbSet.add("Rosemary");
      boolean removed = herbSet.remove(aString);
      if (!removed)
      {
         System.out.println(aString + " not found ");
      }
      System.out.println("Size of the set is: " + herbSet.size());


// Exercise 1
// Adding and removing integers from a set

      Set<Integer> numberSet = new HashSet<>();
      int anInt = 4;      // try different values
      numberSet.add(anInt);
      numberSet.add(1);
      numberSet.add(4);
      numberSet.add(5);
      numberSet.remove(6); 
      numberSet.remove(1);

// Illustration 1
// Iterating over a set
   
   /**
    * Demonstrates iteration over a set of Integers.
    * Displays the sum of all of the elements.
    */
    
        Set<Integer> numSet =  new HashSet<>();
        numSet.add(12);
        numSet.add(9);
        numSet.add(88);
        int total = 0;

        for (Integer eachNum : numSet)
        {
            total = total + eachNum;
        }

        System.out.println ("Sum of all the elements is: " + total);
    

// ACTIVITY 4    
// Demonstrates creation of a set of strings

      Set<String> herbSet = new HashSet<>();
      herbSet.add("camomile");
      herbSet.add("rosemary");
      herbSet.add("basil");
      herbSet.add("thyme");
      herbSet.add("mint");
      herbSet.add("sage");
      herbSet.add("lovage");
      herbSet.add("parsley");
      herbSet.add("chives");
      herbSet.add("marjoram");
      System.out.println(herbSet.size());

// YOUR SOLUTION to ACTIVITY 4
// Demonstrates iteration over a set of strings


// YOUR SOLUTION to ACTIVITY 5
// Iteration over a sorted collection


// --------------------------------------------------
// Code Examples for Maps

// ACTIVITY 6
// 6.1 Check the size of newly created map

		   /**
		    * Demonstrates the effect of sending a size() message to a
		    * a newly created empty map.
		    */
		    Map<String, String> phonebook = new HashMap<>();
		    int size  = phonebook.size();
		    System.out.println("Size of newly created phonebook: " + size); 

		   /**
		    * Demonstrates the effect of sending a put() message to a map
		    * to add a new key-value entry.
		    */
		      Map<String, String> phonebook = new HashMap<>();
		      phonebook.put("Captain Pugwash", "6001");  
		      phonebook.put("Tom the Cabin Boy", "5204");  
		      phonebook.put("Pirate Jake", "0667");  
		      System.out.println("Size after adding entries is: " + phonebook.size()); 
		
// YOUR SOLUTION to ACTIVITY 6
// 6.2 Poets' Map with five entries		
				

// ACTIVITY 7
// A range of examples on the basic behaviour of maps

// 7.1 Looking up an entry in a map

		   /**
		    * Demonstrates the retrieval of the value of a map entry
		    * using its key and the get() message.
		    */ 

		      Map<String, String> phonebook = new HashMap<>();
		      phonebook.put("Pugwash", "6001");  
		      phonebook.put("Tom", "5204");  
		      phonebook.put("Jake", "0667");  
		      String phoneNum = phonebook.get("Tom");
		      System.out.println("Phone number is: " + phoneNum); 


// 7.2 Looking up an entry using a non-existent key

		   /**
		    * Demonstrates the attempted retrieval of the value of a 
		    * map entry using a key that doesn't exist in the map.
		    */ 

		      Map<String, String> phonebook = new HashMap<>();
		      phonebook.put("Pugwash", "6001");  
		      phonebook.put("Tom", "5204");  
		      phonebook.put("Jake", "0667");  
		      String phoneNum = phonebook.get("Barnabas");
		      System.out.println("Phone number is: " + phoneNum); 

// 7.3 Can you have two key-value pairs with the same key?

		    /**
		    * Demonstrates the effect that putting two key-value pairs  
		    * with the same key into a map has on the size of that map
		    */

		       Map<String, String> phonebook = new HashMap<>();
		       phonebook.put( "Captain Pugwash", "6001");  
		       phonebook.put( "Tom the Cabin Boy", "5204");  
		       phonebook.put("Pirate Jake", "0667");  
		       System.out.println("Size before adding key twice is: " + phonebook.size());
		       phonebook.put("Pirate Jake", "0668"); 
		       System.out.println("Size after adding key twice is: " + phonebook.size()); 

// 7.4 Updating a map entry

		   /**
		    * Demonstrates how to update the value of a map entry
		    * using the put() message.
		    */

		      Map<String, String> phonebook = new HashMap<>();
		      phonebook.put("Captain Pugwash", "6001");  
		      phonebook.put("Tom the Cabin Boy", "5204");  
		      phonebook.put("Pirate Jake", "0667");  
		      phonebook.put("Pirate Jake", "0668"); 
		      String phoneNum = phonebook.get("Pirate Jake");
		      System.out.println("Phone number is: " + phoneNum);
		
// 7.5 Removing an entry from a map		
		
		    /**
		    * Demonstrates the use of the remove() message 
		    * to remove an entry from a map
		    */

		      Map<String, String> phonebook = new HashMap<>();
		      phonebook.put("Captain Pugwash", "6001");  
		      phonebook.put("Tom the Cabin Boy", "5204");  
		      phonebook.put("Pirate Jake", "0667");  
		      phonebook.put("Pirate Jake", "0668"); 
		      String removedKey = phonebook.remove("Pirate Jake");
		      System.out.println("Removed " + removedKey);  

// 7.6 Trying to remove an entry that isn't there
		   /**
		    * Demonstrates unsuccessful removal of an entry from a map
		    */

		      Map<String, String> phonebook = new HashMap<>();
		      phonebook.put("Captain Pugwash", "6001");  
		      phonebook.put("Tom the Cabin Boy", "5204");  
		      phonebook.put("Pirate Jake", "0667");  
		      phonebook.put("Pirate Jake", "0668"); 
		      String removedKey = phonebook.remove("Barnabas");
		      System.out.println("Removed: " + removedKey);  
		
// YOUR SOLUTION to ACTIVITY 7
//  Extended Poets' Map  with Brian Patten 		
		

// ACTIVITY 8

// 8.1 Demonstrating containsKey() and containsValue()
		  
		      Map<String, String> phonebook = new HashMap<>();
		      phonebook.put("Captain Pugwash", "6001");  
		      phonebook.put("Tom the Cabin Boy", "5204");  
		      phonebook.put("Pirate Jake", "0667");  
		      boolean result = phonebook.containsKey("Tom the Cabin Boy");
		      System.out.println("Map contains entry for Tom the Cabin Boy: " + result);
		      result = phonebook.containsValue("5204");
		      System.out.println("Map contains value 5204: " + result);   
		   
// YOUR SOLUTION to ACTIVITY 8
//  Final Poets' Map with Ted Hughes

// ILLUSTRATION 2
// Iterating over a map using keySet() 
	
		   Map<String, String> dictionary  = new HashMap<>();
		   dictionary.put("one", "ichi");
		   dictionary.put("two", "ni");
		   dictionary.put("three", "san");
		   dictionary.put("four", "shi");

		   Set<String> dictionaryKeys = dictionary.keySet();
		   for (String eachEnglishWord : dictionaryKeys)
		   {  
		       System.out.println("The Japanese for " + eachEnglishWord + 
		       " is " + dictionary.get(eachEnglishWord));  
		   }
		
// YOUR SOLUTION to ACTIVITY 9
// Iterating over a map to calculate an average	
		
			

// ACTIVITY 10
// Locating the first and last entries in a sorted set

		Set<String> herbSet = new TreeSet<>();
		herbSet.add("camomile");
		herbSet.add("rosemary");
		herbSet.add("basil");
		herbSet.add("thyme");
		herbSet.add("mint");
		herbSet.add("sage");
		herbSet.add("lovage");
		herbSet.add("parsley");
		herbSet.add("chives");
		herbSet.add("marjoram");
		for (String herb : herbSet)
		{
		   System.out.println(herb);
		}


// YOUR SOLUTION to ACTIVITY 11
// Demonstrates destructive set intersection	


// YOUR SOLUTION to ACTIVITY 12
// Demonstrates non-destructive set union

// ACTIVITIES 13- 18 - see  Unit 10 Projects
